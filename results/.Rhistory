setwd("/Users/jerry/Documents/CSBQ/hijri/Acadian_seaplants/results")
library(dplyr)
#getting summary data & clean it up
summary.stats.fungi_root = read.table("asv/summary.stats.fungi_root",header = T,sep = "",stringsAsFactors = F)
summary.stats.bacteria_root = read.table("asv/summary.stats.bacteria_root",header = T,sep = "",stringsAsFactors = F)
summary.stats.bacteria_soil = read.table("asv/summary.stats.bacteria_soil",header = T,sep = "",stringsAsFactors = F)
summary.stats.fungi_soil = read.table("asv/summary.stats.fungi_soil",header = T,sep = "",stringsAsFactors = F)
dim(summary.stats.fungi_root)
head(summary.stats.fungi_root)
str(summary.stats.fungi_root)
dim(summary.stats.fungi_soil)
dim(summary.stats.fungi_root)
dim(summary.stats.bacteria_soil)
dim(summary.stats.bacteria_root)
summary.stats = rbind(summary.stats.bacteria_root,summary.stats.bacteria_soil,summary.stats.fungi_root,summary.stats.fungi_soil)
summary.stats$treatment =  c(rep("bacteria_root",95),rep("bacteria_soil",192),
rep("fungi_root",96),rep("fungi_soil",192))
head(summary.stats)
summary.table = summary.stats %>% group_by(treatment) %>% summarise(Nb_samples = n(),
Nb_seq_sumX10e3 = round(sum(Input)/10000),Nb_seq_mean = round(mean(Input)),Nb_seq_mean_filtered = round(mean(Filter)),
Nb_seq_mean_filt_merged = round(mean(Merge)),Nb_seq_mean_filt_merg_non_chimeras = round(mean(Non.chim)),
ASV_persample = round(mean(ASV.sample)))
summary.table = summary.stats %>% group_by(treatment) %>% summarise(Nb_samples = n(),
Nb_seq_sumX10e3 = round(sum(Input)/10000),Nb_seq_mean = round(mean(Input)),Nb_seq_mean_filtered = round(mean(Filter)),
Nb_seq_mean_filt_merged = round(mean(Merge)),Nb_seq_mean_filt_merg_non_chimeras = round(mean(Non.chim)),
ASV_persample = round(mean(X.ASV.sample)))
summary.table
t= 1
paste("asv/asv.",unique(summary.stats$treatment)[t],sep = "")
for(t in 1:4)
{
asv = read.table(paste("asv/asv.",unique(summary.stats$treatment)[t],sep = ""),row.names = 1, sep = " ",header =TRUE,stringsAsFactors = F)
#remove the bad samples (below 4 standard deviations...).
asv.sum = rowSums(asv)
min(asv.sum);max(asv.sum)
asv.sum.mean = mean(asv.sum)
asv.sum.sd = sd(asv.sum)
asv.filt = asv[asv.sum > (asv.sum.mean - 4*asv.sum.sd),]
asv.filt = asv[asv.sum > 1000,]
summary.table$ASV_sum[t] = ncol(asv.filt)
summary.table$Nb_samples_trimmed[t] = nrow(asv.filt)
asv.singletons = rep(0,ncol(asv.filt)) #in how many samples is an ASV found...
for(i in 1:ncol(asv.filt))
{
asv.singletons[i] = length(asv.filt[asv.filt[,i]!=0,i])
}
asv.filt.abundants = asv.filt[,asv.singletons>(c(5,10,5,10)[t])]
summary.table$ASV_sum_trimmed[t] = ncol(asv.filt.abundants)
print(sum(asv.filt.abundants)/sum(asv.filt))
}
summary.table
head(summary.table
)
head(summary.table,6)
summary.table[5:8,]
summary.table[,8:11]
summary.table[,8]
mean(summary.table[,8])
mean(c92,269,37,176))
mean(c(92,269,37,176))
head(summary.stats)
mean(summary.stats$X.ASV.sample)
summary.stats
summary.table
head(summary.stats)
mean(summary.stats[,1])
mean(summary.stats[,8])
summary.table[,8:11]
96*2
write.table(summary.table, "summary.table",row.names = F)
