tip.color = c(1:80)
for(i in 1:length(tip.color))
{
#get some nice colors to show up.
if((candidate.ASV.all[i,4] == "Tomato") & (candidate.ASV.all[i,13] == "br")) tip.color[i] = "darkred"
if((candidate.ASV.all[i,4] == "Tomato") & (candidate.ASV.all[i,13] == "bs")) tip.color[i] = "darkorange2"
if((candidate.ASV.all[i,4] == "Pepper") & (candidate.ASV.all[i,13] == "br")) tip.color[i] = "cyan4"
if((candidate.ASV.all[i,4] == "Pepper") & (candidate.ASV.all[i,13] == "bs")) tip.color[i] = "darkblue"
if((candidate.ASV.all[i,4] == "Tomato") & (candidate.ASV.all[i,13] == "fr")) tip.color[i] = "darkred"
if((candidate.ASV.all[i,4] == "Tomato") & (candidate.ASV.all[i,13] == "fs")) tip.color[i] = "darkorange2"
if((candidate.ASV.all[i,4] == "Pepper") & (candidate.ASV.all[i,13] == "fr")) tip.color[i] = "cyan4"
if((candidate.ASV.all[i,4] == "Pepper") & (candidate.ASV.all[i,13] == "fs")) tip.color[i] = "darkblue"
}
#plot.phylo
dev.new()
plot.phylo(treeNJ,cex = 0.5,tip.color = tip.color[candidate.ASV.all$Kingdom==taxa],font = 2,main = taxa,xpd = T)
if(taxa == "Fungi") legend(max(treeNJ$edge.length),40,legend =  c("Tomato - root","Tomato - soil","Pepper - root","Pepper - soil"), fill = c("darkred","darkorange2","cyan4","darkblue"))
if(taxa == "Bacteria") legend(0.02,40,legend =  c("Tomato - root","Tomato - soil","Pepper - root","Pepper - soil"), fill = c("darkred","darkorange2","cyan4","darkblue"),bg = "white")
taxa = "Fungi"
###get phylo ----
seqs <- candidate.ASV.all[candidate.ASV.all$Kingdom==taxa,12]
names(seqs) <- candidate.ASV.all$names_collapse[candidate.ASV.all$Kingdom==taxa] # This propagates to the tip labels of the tree
alignment <- AlignSeqs(DNAStringSet(seqs), anchor=NA)
phang.align <- phyDat(as(alignment, "matrix"), type="DNA") #sequence alignments
dm <- dist.ml(phang.align) #build distance matrix
treeNJ <- NJ(dm) # Note, tip order != sequence order
#plot phylo based on distance matrix----
tip.color = c(1:80)
for(i in 1:length(tip.color))
{
#get some nice colors to show up.
if((candidate.ASV.all[i,4] == "Tomato") & (candidate.ASV.all[i,13] == "br")) tip.color[i] = "darkred"
if((candidate.ASV.all[i,4] == "Tomato") & (candidate.ASV.all[i,13] == "bs")) tip.color[i] = "darkorange2"
if((candidate.ASV.all[i,4] == "Pepper") & (candidate.ASV.all[i,13] == "br")) tip.color[i] = "cyan4"
if((candidate.ASV.all[i,4] == "Pepper") & (candidate.ASV.all[i,13] == "bs")) tip.color[i] = "darkblue"
if((candidate.ASV.all[i,4] == "Tomato") & (candidate.ASV.all[i,13] == "fr")) tip.color[i] = "darkred"
if((candidate.ASV.all[i,4] == "Tomato") & (candidate.ASV.all[i,13] == "fs")) tip.color[i] = "darkorange2"
if((candidate.ASV.all[i,4] == "Pepper") & (candidate.ASV.all[i,13] == "fr")) tip.color[i] = "cyan4"
if((candidate.ASV.all[i,4] == "Pepper") & (candidate.ASV.all[i,13] == "fs")) tip.color[i] = "darkblue"
}
#plot.phylo
dev.new()
plot.phylo(treeNJ,cex = 0.5,tip.color = tip.color[candidate.ASV.all$Kingdom==taxa],font = 2,main = taxa,xpd = T)
if(taxa == "Fungi") legend(max(treeNJ$edge.length),40,legend =  c("Tomato - root","Tomato - soil","Pepper - root","Pepper - soil"), fill = c("darkred","darkorange2","cyan4","darkblue"))
if(taxa == "Bacteria") legend(0.02,40,legend =  c("Tomato - root","Tomato - soil","Pepper - root","Pepper - soil"), fill = c("darkred","darkorange2","cyan4","darkblue"),bg = "white")
if(taxa == "Fungi") legend(0.02,40,legend =  c("Tomato - root","Tomato - soil","Pepper - root","Pepper - soil"), fill = c("darkred","darkorange2","cyan4","darkblue"),bg = "white")
dev.new()
plot.phylo(treeNJ,cex = 0.5,tip.color = tip.color[candidate.ASV.all$Kingdom==taxa],font = 2,main = taxa,xpd = T)
if(taxa == "Fungi") legend(0.02,40,legend =  c("Tomato - root","Tomato - soil","Pepper - root","Pepper - soil"), fill = c("darkred","darkorange2","cyan4","darkblue"),bg = "#FFFFFF99")
#plot trees
for(taxa in c("Bacteria","Fungi"))
{
###get phylo ----
seqs <- candidate.ASV.all[candidate.ASV.all$Kingdom==taxa,12]
names(seqs) <- candidate.ASV.all$names_collapse[candidate.ASV.all$Kingdom==taxa] # This propagates to the tip labels of the tree
alignment <- AlignSeqs(DNAStringSet(seqs), anchor=NA)
phang.align <- phyDat(as(alignment, "matrix"), type="DNA") #sequence alignments
dm <- dist.ml(phang.align) #build distance matrix
treeNJ <- NJ(dm) # Note, tip order != sequence order
#plot phylo based on distance matrix----
tip.color = c(1:80)
for(i in 1:length(tip.color))
{
#get some nice colors to show up.
if((candidate.ASV.all[i,4] == "Tomato") & (candidate.ASV.all[i,13] == "br")) tip.color[i] = "darkred"
if((candidate.ASV.all[i,4] == "Tomato") & (candidate.ASV.all[i,13] == "bs")) tip.color[i] = "darkorange2"
if((candidate.ASV.all[i,4] == "Pepper") & (candidate.ASV.all[i,13] == "br")) tip.color[i] = "cyan4"
if((candidate.ASV.all[i,4] == "Pepper") & (candidate.ASV.all[i,13] == "bs")) tip.color[i] = "darkblue"
if((candidate.ASV.all[i,4] == "Tomato") & (candidate.ASV.all[i,13] == "fr")) tip.color[i] = "darkred"
if((candidate.ASV.all[i,4] == "Tomato") & (candidate.ASV.all[i,13] == "fs")) tip.color[i] = "darkorange2"
if((candidate.ASV.all[i,4] == "Pepper") & (candidate.ASV.all[i,13] == "fr")) tip.color[i] = "cyan4"
if((candidate.ASV.all[i,4] == "Pepper") & (candidate.ASV.all[i,13] == "fs")) tip.color[i] = "darkblue"
}
#plot.phylo
dev.new()
plot.phylo(treeNJ,cex = 0.5,tip.color = tip.color[candidate.ASV.all$Kingdom==taxa],font = 2,main = taxa,xpd = T)
if(taxa == "Fungi") legend(0.02,40,legend =  c("Tomato - root","Tomato - soil","Pepper - root","Pepper - soil"), fill = c("darkred","darkorange2","cyan4","darkblue"),bg = "#FFFFFF99")
if(taxa == "Bacteria") legend(0.02,40,legend =  c("Tomato - root","Tomato - soil","Pepper - root","Pepper - soil"), fill = c("darkred","darkorange2","cyan4","darkblue"),bg = "FFFFFF99")
dev.print(device=pdf, paste("figures/",tolower(taxa),"/Figure7_",tolower(taxa),"_tree.pdf",sep = ""), onefile=FALSE)
dev.off()
}
#plot trees
for(taxa in c("Bacteria","Fungi"))
{
###get phylo ----
seqs <- candidate.ASV.all[candidate.ASV.all$Kingdom==taxa,12]
names(seqs) <- candidate.ASV.all$names_collapse[candidate.ASV.all$Kingdom==taxa] # This propagates to the tip labels of the tree
alignment <- AlignSeqs(DNAStringSet(seqs), anchor=NA)
phang.align <- phyDat(as(alignment, "matrix"), type="DNA") #sequence alignments
dm <- dist.ml(phang.align) #build distance matrix
treeNJ <- NJ(dm) # Note, tip order != sequence order
#plot phylo based on distance matrix----
tip.color = c(1:80)
for(i in 1:length(tip.color))
{
#get some nice colors to show up.
if((candidate.ASV.all[i,4] == "Tomato") & (candidate.ASV.all[i,13] == "br")) tip.color[i] = "darkred"
if((candidate.ASV.all[i,4] == "Tomato") & (candidate.ASV.all[i,13] == "bs")) tip.color[i] = "darkorange2"
if((candidate.ASV.all[i,4] == "Pepper") & (candidate.ASV.all[i,13] == "br")) tip.color[i] = "cyan4"
if((candidate.ASV.all[i,4] == "Pepper") & (candidate.ASV.all[i,13] == "bs")) tip.color[i] = "darkblue"
if((candidate.ASV.all[i,4] == "Tomato") & (candidate.ASV.all[i,13] == "fr")) tip.color[i] = "darkred"
if((candidate.ASV.all[i,4] == "Tomato") & (candidate.ASV.all[i,13] == "fs")) tip.color[i] = "darkorange2"
if((candidate.ASV.all[i,4] == "Pepper") & (candidate.ASV.all[i,13] == "fr")) tip.color[i] = "cyan4"
if((candidate.ASV.all[i,4] == "Pepper") & (candidate.ASV.all[i,13] == "fs")) tip.color[i] = "darkblue"
}
#plot.phylo
dev.new()
plot.phylo(treeNJ,cex = 0.5,tip.color = tip.color[candidate.ASV.all$Kingdom==taxa],font = 2,main = taxa,xpd = T)
if(taxa == "Fungi") legend(0.02,40,legend =  c("Tomato - root","Tomato - soil","Pepper - root","Pepper - soil"), fill = c("darkred","darkorange2","cyan4","darkblue"),bg = "#FFFFFF99")
if(taxa == "Bacteria") legend(0.02,40,legend =  c("Tomato - root","Tomato - soil","Pepper - root","Pepper - soil"), fill = c("darkred","darkorange2","cyan4","darkblue"),bg = "#FFFFFF99")
dev.print(device=pdf, paste("figures/",tolower(taxa),"/Figure7_",tolower(taxa),"_tree.pdf",sep = ""), onefile=FALSE)
dev.off()
}
#Figure 7 - trees -----
figure7 = multi_panel_figure(width = 14,height = 7, unit = "inch",rows = 1,columns = 2)
figure7 %<>% fill_panel("figures/bacteria/Figure7_bacteria_tree.pdf",row = 1, column = 2)
figure7 %<>% fill_panel("figures/fungi/Figure7_fungi_tree.pdf",row = 1, column = 1)
figure7 %>% save_multi_panel_figure(filename = "figures/Figure7_candidateASVs.pdf")
candidates = NULL
dim(taxo.abundants)
setwd("/Users/jerry/Documents/CSBQ/hijri/Acadian_seaplants")
asv = read.table("results/asv/asv.fungi_soil",row.names = 1, sep = " ",header =TRUE,stringsAsFactors = F)
taxo = read.table("results/asv/asv.taxo.fungi_soil",row.names = 1, sep = " ",header =TRUE,stringsAsFactors = F)
#tidy up ----
#remove the bad samples (below 4 standard deviations... OR 1000 reads...).
asv.sum = rowSums(asv)
min(asv.sum);max(asv.sum)
asv.sum.mean = mean(asv.sum)
asv.sum.sd = sd(asv.sum)
asv.filt = asv[asv.sum > (asv.sum.mean - 4*asv.sum.sd),]
asv.filt = asv[asv.sum > 1000,]
#98% of ASVs are present in less than 10 individuals (5% of samples): this is huge. and justifies the clustering I think for soil bacteria....
asv.singletons = rep(0,ncol(asv.filt))
for(i in 1:ncol(asv.filt))
{
asv.singletons[i] = length(asv.filt[asv.filt[,i]!=0,i])
}
asv.filt.abundants = asv.filt[,asv.singletons>10]
taxo.abundants = taxo[asv.singletons>10,]
dim(taxo.abundants)
dim(asv.filt.abundants.norm)
#what fraction of ASV do you got rid off
print(length(asv.singletons[asv.singletons<10])/length(asv.singletons))
#what percentage of reads did you keep
sum(asv.filt.abundants)/sum(asv.filt)
#relative abundance
asv.filt.abundants.norm = asv.filt.abundants/rowSums(asv.filt.abundants)
dim(asv.filt.abundants.norm)
taxo = read.table("results/asv/asv.taxo.fungi_root",row.names = 1, sep = " ",header =TRUE,stringsAsFactors = F)
#tidy up ----
#remove the bad samples (below 4 standard deviations...).
asv.sum = rowSums(asv)
min(asv.sum);max(asv.sum)
asv.sum.mean = mean(asv.sum)
asv.sum.sd = sd(asv.sum)
asv.filt = asv[asv.sum > (asv.sum.mean - 4*asv.sum.sd),]
asv.filt = asv[asv.sum > 1000,]
#98% of ASVs are present in less than 5 individuals (5% of samples): this is huge. and justifies the clustering I think for soil bacteria....
asv.singletons = rep(0,ncol(asv.filt))
for(i in 1:ncol(asv.filt))
{
asv.singletons[i] = length(asv.filt[asv.filt[,i]!=0,i])
}
asv.filt.abundants = asv.filt[,asv.singletons>5]
taxo.abundants = taxo[asv.singletons>5,]
#what fraction of ASV do you got rid off
print(length(asv.singletons[asv.singletons<5])/length(asv.singletons))
#what percentage of reads did you keep
sum(asv.filt.abundants)/sum(asv.filt)
#relative abundance
asv.filt.abundants.norm = asv.filt.abundants/rowSums(asv.filt.abundants)
asv = read.table("results/asv/asv.bacteria_soil",row.names = 1, sep = " ",header =TRUE,stringsAsFactors = F)
taxo = read.table("results/asv/asv.taxo.bacteria_soil",row.names = 1, sep = " ",header =TRUE,stringsAsFactors = F)
#tidy up ----
#remove the bad samples (below 4 standard deviations...).
asv.sum = rowSums(asv)
min(asv.sum);max(asv.sum)
asv.sum.mean = mean(asv.sum)
asv.sum.sd = sd(asv.sum)
asv.filt = asv[asv.sum > (asv.sum.mean - 4*asv.sum.sd),]
asv.filt = asv[asv.sum > 1000,]
#98% of ASVs are present in less than 10 individuals (5% of samples): this is huge. and justifies the clustering I think for soil bacteria....
asv.singletons = rep(0,ncol(asv.filt))
for(i in 1:ncol(asv.filt))
{
asv.singletons[i] = length(asv.filt[asv.filt[,i]!=0,i])
}
asv.filt.abundants = asv.filt[,asv.singletons>10]
taxo.abundants = taxo[asv.singletons>10,]
#what fraction of ASV do you got rid off
print(length(asv.singletons[asv.singletons<10])/length(asv.singletons))
#what percentage of reads did you keep
sum(asv.filt.abundants)/sum(asv.filt)
#relative abundance
asv.filt.abundants.norm = asv.filt.abundants/rowSums(asv.filt.abundants)
asv = read.table("results/asv/asv.bacteria_root",row.names = 1, sep = " ",header =TRUE,stringsAsFactors = F)
taxo = read.table("results/asv/asv.taxo.bacteria_root",row.names = 1, sep = " ",header =TRUE,stringsAsFactors = F)
#tidy up ----
#remove the bad samples (below 4 standard deviations...).
asv.sum = rowSums(asv)
min(asv.sum);max(asv.sum)
asv.sum.mean = mean(asv.sum)
asv.sum.sd = sd(asv.sum)
asv.filt = asv[asv.sum > (asv.sum.mean - 4*asv.sum.sd),]
asv.filt = asv[asv.sum > 1000,]
#98% of ASVs are present in less than 5 individuals (5% of samples): this is huge. and justifies the clustering I think for soil bacteria....
asv.singletons = rep(0,ncol(asv.filt))
for(i in 1:ncol(asv.filt))
{
asv.singletons[i] = length(asv.filt[asv.filt[,i]!=0,i])
}
asv.filt.abundants = asv.filt[,asv.singletons>5]
taxo.abundants = taxo[asv.singletons>5,]
#what fraction of ASV did you get rid off
print(length(asv.singletons[asv.singletons<5])/length(asv.singletons))
#what percentage of reads did you keep
sum(asv.filt.abundants)/sum(asv.filt)
dim(asv.filt.abundants)
dim(asv.filt)
asv = read.table("results/asv/asv.fungi_soil",row.names = 1, sep = " ",header =TRUE,stringsAsFactors = F)
taxo = read.table("results/asv/asv.taxo.fungi_soil",row.names = 1, sep = " ",header =TRUE,stringsAsFactors = F)
#tidy up ----
#remove the bad samples (below 4 standard deviations... OR 1000 reads...).
asv.sum = rowSums(asv)
min(asv.sum);max(asv.sum)
asv.sum.mean = mean(asv.sum)
asv.sum.sd = sd(asv.sum)
asv.filt = asv[asv.sum > (asv.sum.mean - 4*asv.sum.sd),]
asv.filt = asv[asv.sum > 1000,]
#98% of ASVs are present in less than 10 individuals (5% of samples): this is huge. and justifies the clustering I think for soil bacteria....
asv.singletons = rep(0,ncol(asv.filt))
for(i in 1:ncol(asv.filt))
{
asv.singletons[i] = length(asv.filt[asv.filt[,i]!=0,i])
}
asv.filt.abundants = asv.filt[,asv.singletons>10]
taxo.abundants = taxo[asv.singletons>10,]
#what fraction of ASV do you got rid off
print(length(asv.singletons[asv.singletons<10])/length(asv.singletons))
#what percentage of reads did you keep
sum(asv.filt.abundants)/sum(asv.filt)
#relative abundance
asv.filt.abundants.norm = asv.filt.abundants/rowSums(asv.filt.abundants)
dim(asv.filt.abundants)
dim(asv.filt)
taxo = read.table("results/asv/asv.taxo.fungi_root",row.names = 1, sep = " ",header =TRUE,stringsAsFactors = F)
#tidy up ----
#remove the bad samples (below 4 standard deviations...).
asv.sum = rowSums(asv)
min(asv.sum);max(asv.sum)
asv.sum.mean = mean(asv.sum)
asv.sum.sd = sd(asv.sum)
asv.filt = asv[asv.sum > (asv.sum.mean - 4*asv.sum.sd),]
asv.filt = asv[asv.sum > 1000,]
#98% of ASVs are present in less than 5 individuals (5% of samples): this is huge. and justifies the clustering I think for soil bacteria....
asv.singletons = rep(0,ncol(asv.filt))
for(i in 1:ncol(asv.filt))
{
asv.singletons[i] = length(asv.filt[asv.filt[,i]!=0,i])
}
asv.filt.abundants = asv.filt[,asv.singletons>5]
taxo.abundants = taxo[asv.singletons>5,]
#what fraction of ASV do you got rid off
print(length(asv.singletons[asv.singletons<5])/length(asv.singletons))
#what percentage of reads did you keep
sum(asv.filt.abundants)/sum(asv.filt)
#relative abundance
asv.filt.abundants.norm = asv.filt.abundants/rowSums(asv.filt.abundants)
dim(asv.filt.abundants)
dim(asv.filt)
asv = read.table("results/asv/asv.fungi_root",row.names = 1, sep = " ",header =TRUE,stringsAsFactors = F)
taxo = read.table("results/asv/asv.taxo.fungi_root",row.names = 1, sep = " ",header =TRUE,stringsAsFactors = F)
#tidy up ----
#remove the bad samples (below 4 standard deviations...).
asv.sum = rowSums(asv)
min(asv.sum);max(asv.sum)
asv.sum.mean = mean(asv.sum)
asv.sum.sd = sd(asv.sum)
asv.filt = asv[asv.sum > (asv.sum.mean - 4*asv.sum.sd),]
asv.filt = asv[asv.sum > 1000,]
#98% of ASVs are present in less than 5 individuals (5% of samples): this is huge. and justifies the clustering I think for soil bacteria....
asv.singletons = rep(0,ncol(asv.filt))
for(i in 1:ncol(asv.filt))
{
asv.singletons[i] = length(asv.filt[asv.filt[,i]!=0,i])
}
asv.filt.abundants = asv.filt[,asv.singletons>5]
taxo.abundants = taxo[asv.singletons>5,]
#what fraction of ASV do you got rid off
print(length(asv.singletons[asv.singletons<5])/length(asv.singletons))
#what percentage of reads did you keep
sum(asv.filt.abundants)/sum(asv.filt)
dim(asv.filt.abundants)
dim(asv.filt)
asv = read.table("results/asv/asv.bacteria_root",row.names = 1, sep = " ",header =TRUE,stringsAsFactors = F)
taxo = read.table("results/asv/asv.taxo.bacteria_root",row.names = 1, sep = " ",header =TRUE,stringsAsFactors = F)
#tidy up ----
#remove the bad samples (below 4 standard deviations...).
asv.sum = rowSums(asv)
min(asv.sum);max(asv.sum)
asv.sum.mean = mean(asv.sum)
asv.sum.sd = sd(asv.sum)
asv.filt = asv[asv.sum > (asv.sum.mean - 4*asv.sum.sd),]
asv.filt = asv[asv.sum > 1000,]
#98% of ASVs are present in less than 5 individuals (5% of samples): this is huge. and justifies the clustering I think for soil bacteria....
asv.singletons = rep(0,ncol(asv.filt))
for(i in 1:ncol(asv.filt))
{
asv.singletons[i] = length(asv.filt[asv.filt[,i]!=0,i])
}
asv.filt.abundants = asv.filt[,asv.singletons>5]
taxo.abundants = taxo[asv.singletons>5,]
#what fraction of ASV did you get rid off
print(length(asv.singletons[asv.singletons<5])/length(asv.singletons))
#what percentage of reads did you keep
sum(asv.filt.abundants)/sum(asv.filt)
#relative abundance
asv.filt.abundants.norm = asv.filt.abundants/rowSums(asv.filt.abundants)
dim(asv.filt.abundants.norm)
dim(asv.filt)
asv = read.table("results/asv/asv.bacteria_soil",row.names = 1, sep = " ",header =TRUE,stringsAsFactors = F)
taxo = read.table("results/asv/asv.taxo.bacteria_soil",row.names = 1, sep = " ",header =TRUE,stringsAsFactors = F)
#tidy up ----
#remove the bad samples (below 4 standard deviations...).
asv.sum = rowSums(asv)
min(asv.sum);max(asv.sum)
asv.sum.mean = mean(asv.sum)
asv.sum.sd = sd(asv.sum)
asv.filt = asv[asv.sum > (asv.sum.mean - 4*asv.sum.sd),]
asv.filt = asv[asv.sum > 1000,]
#98% of ASVs are present in less than 10 individuals (5% of samples): this is huge. and justifies the clustering I think for soil bacteria....
asv.singletons = rep(0,ncol(asv.filt))
for(i in 1:ncol(asv.filt))
{
asv.singletons[i] = length(asv.filt[asv.filt[,i]!=0,i])
}
asv.filt.abundants = asv.filt[,asv.singletons>10]
taxo.abundants = taxo[asv.singletons>10,]
#what fraction of ASV do you got rid off
print(length(asv.singletons[asv.singletons<10])/length(asv.singletons))
#what percentage of reads did you keep
sum(asv.filt.abundants)/sum(asv.filt)
#relative abundance
asv.filt.abundants.norm = asv.filt.abundants/rowSums(asv.filt.abundants)
dim(asv.filt)
dim(asv.filt.abundants.norm)
asv = read.table("results/asv/asv.fungi_soil",row.names = 1, sep = " ",header =TRUE,stringsAsFactors = F)
taxo = read.table("results/asv/asv.taxo.fungi_soil",row.names = 1, sep = " ",header =TRUE,stringsAsFactors = F)
dim(taxo)
taxo[c(132),]
taxo[c(132,153),]
asv = read.table("results/asv/asv.fungi_root",row.names = 1, sep = " ",header =TRUE,stringsAsFactors = F)
taxo = read.table("results/asv/asv.taxo.fungi_root",row.names = 1, sep = " ",header =TRUE,stringsAsFactors = F)
taxo[c(17,19),]
asv = read.table("results/asv/asv.bacteria_soil",row.names = 1, sep = " ",header =TRUE,stringsAsFactors = F)
taxo = read.table("results/asv/asv.taxo.bacteria_soil",row.names = 1, sep = " ",header =TRUE,stringsAsFactors = F)
#tidy up ----
#remove the bad samples (below 4 standard deviations...).
asv.sum = rowSums(asv)
min(asv.sum);max(asv.sum)
asv.sum.mean = mean(asv.sum)
asv.sum.sd = sd(asv.sum)
asv.filt = asv[asv.sum > (asv.sum.mean - 4*asv.sum.sd),]
asv.filt = asv[asv.sum > 1000,]
#98% of ASVs are present in less than 10 individuals (5% of samples): this is huge. and justifies the clustering I think for soil bacteria....
asv.singletons = rep(0,ncol(asv.filt))
for(i in 1:ncol(asv.filt))
{
asv.singletons[i] = length(asv.filt[asv.filt[,i]!=0,i])
}
asv.filt.abundants = asv.filt[,asv.singletons>10]
taxo.abundants = taxo[asv.singletons>10,]
#what fraction of ASV do you got rid off
print(length(asv.singletons[asv.singletons<10])/length(asv.singletons))
#what percentage of reads did you keep
sum(asv.filt.abundants)/sum(asv.filt)
#relative abundance
asv.filt.abundants.norm = asv.filt.abundants/rowSums(asv.filt.abundants)
taxo[885,]
#Tree of candidate ASVs with taxonomy infos---
conditions = c("br","bs","fr","fs")
candidate.ASV.all = NULL
for(i in 1:4)
{
candidate.ASV = read.table(paste("results/candidate.ASV.",conditions[i],".txt",sep = ""),stringsAsFactors = F)
if(ncol(candidate.ASV) == 11) {candidate.ASV = candidate.ASV[,c(1:11,11)];candidate.ASV[,11] = "na";colnames(candidate.ASV)[11:12]  = c("Species","X")}
candidate.ASV$condition = conditions[i]
print(dim(candidate.ASV))
candidate.ASV.all = rbind(candidate.ASV.all,candidate.ASV)
}
candidate.ASV.all
str(candidate.ASV.all)
candidate.ASV.all[,1:6]
candidate.ASV.all[,5:9]
candidate.ASV.all[,7:10]
i = 1
paste(candidate.ASV.all[i,c(1,6:11)],collapse = ";")
candidate.ASV.all$names_collapse[i]=paste(candidate.ASV.all[i,c(1,6:11)],collapse = ";")
gsub(";NA","",candidate.ASV.all$names_collapse[i],ignore.case=T)
candidate.ASV.all[i,c(1,6:11)]
colnames(candidate.ASV.all
)
colnames(candidate.ASV.all)[6:11]
paste("(",colnames(candidate.ASV.all)[6:11],")",sep="")
paste(" (",colnames(candidate.ASV.all)[6:11],")",sep="")
cbind(candidate.ASV.all[i,c(1,6:11)],paste(" (",colnames(candidate.ASV.all)[6:11],")",sep=""))
cbind(candidate.ASV.all[i,c(1,6:11)],paste(""," (",colnames(candidate.ASV.all)[6:11],")",sep=""))
rbind(candidate.ASV.all[i,c(1,6:11)],paste(""," (",colnames(candidate.ASV.all)[6:11],")",sep=""))
rbind(candidate.ASV.all[i,c(1,6:11)],paste(" "," (",colnames(candidate.ASV.all)[6:11],")",sep=""))
paste(" "," (",colnames(candidate.ASV.all)[6:11],")",sep="")
paste("ss "," (",colnames(candidate.ASV.all)[6:11],")",sep="")
paste("ss "," (",colnames(candidate.ASV.all)[5:11],")",sep="")
rbind(candidate.ASV.all[i,c(1,6:11)],paste(" (",colnames(candidate.ASV.all)[5:11],")",sep=""))
temp = rbind(candidate.ASV.all[i,c(1,6:11)],paste(" (",colnames(candidate.ASV.all)[5:11],")",sep=""))
temp
paste(temp,collapse=";")
paste(temp[,1],collapse=";")
paste(temp[1,],collapse=";")
sapply(temp,paste,sep =";")
sapply(temp,paste,,by = 1sep =";")
sapply(temp,paste,,by = 1,sep =";")
?sapply
as.vector(temp)
temp
vector(temp)
as.list(temp)
unlist(as.list(temp))
paste(unlist(as.list(temp)),sep = ";")
paste(unlist(as.list(temp)),collapse = ";")
temp = rbind(candidate.ASV.all[i,c(1,6:11)],paste(" (",colnames(candidate.ASV.all)[5:11],");",sep=""))
temp
paste(unlist(as.list(temp)),collapse = ";")
paste(unlist(as.list(temp)),collapse = "")
candidate.ASV.all$names_collapse[i]=paste(candidate.ASV.all[i,c(1,6:11)],collapse = ";")
gsub(";NA","",candidate.ASV.all$names_collapse[i],ignore.case=T)
colnames(candidate.ASV.all)[5:11]
paste(candidate.ASV.all[i,c(1,6:11)],collapse = ";")
candidate.ASV.all[i,c(1,6:11)]
candidate.ASV.all$names_collapse[i]=gsub(";NA","",candidate.ASV.all$names_collapse[i],ignore.case=T)
candidate.ASV.all$names_collapse[i]
regexpr(";",candidate.ASV.all$names_collapse[i])
gregexpr(";",candidate.ASV.all$names_collapse[i])
gregexpr(";",candidate.ASV.all$names_collapse[i])[[1]]
lenght(gregexpr(";",candidate.ASV.all$names_collapse[i])[[1]])
length(gregexpr(";",candidate.ASV.all$names_collapse[i])[[1]])
colnames(candidate.ASV.all)[5+len|
]
colnames(candidate.ASV.all)[5+len]
len = length(gregexpr(";",candidate.ASV.all$names_collapse[i])[[1]])
colnames(candidate.ASV.all)[5+len]
temp_taxo=strsplit(candidate.ASV.all$names_collapse[i],split = ";")[[1]]
temp_taxo
paste(temp_taxo[1],temp_taxo[length(temp_taxo)],collapse = ";")
paste(temp_taxo[1],temp_taxo[length(temp_taxo)],,collapse = ";")
len.exact = colnames(candidate.ASV.all)[5+len]
len.exact
len.exact = paste(" (",colnames(candidate.ASV.all)[5+len],")",sep= "")
len.exact
paste(temp_taxo[1],temp_taxo[length(temp_taxo)],len.exact,collapse = ";")
len.exact = paste("(",colnames(candidate.ASV.all)[5+len],")",sep= "")
paste(temp_taxo[1],temp_taxo[length(temp_taxo)],len.exact,collapse = ";")
#collapse taxo info.
candidate.ASV.all$names_collapse = NULL
for(i in 1:80)
{
candidate.ASV.all$names_collapse[i]=paste(candidate.ASV.all[i,c(1,6:11)],collapse = ";")
candidate.ASV.all$names_collapse[i]=gsub(";NA","",candidate.ASV.all$names_collapse[i],ignore.case=T)
#how far along the taxo did you get...
len = length(gregexpr(";",candidate.ASV.all$names_collapse[i])[[1]])
len.exact = paste("(",colnames(candidate.ASV.all)[5+len],")",sep= "")
#get only the ASV + last part of the taxonomy
temp_taxo=strsplit(candidate.ASV.all$names_collapse[i],split = ";")[[1]]
if(length(temp_taxo)==1) candidate.ASV.all$names_collapse[i] = temp_taxo
if(length(temp_taxo)>1) candidate.ASV.all$names_collapse[i] = paste(temp_taxo[1],temp_taxo[length(temp_taxo)],len.exact,collapse = ";")
}
#plot trees
for(taxa in c("Bacteria","Fungi"))
{
###get phylo ----
seqs <- candidate.ASV.all[candidate.ASV.all$Kingdom==taxa,12]
names(seqs) <- candidate.ASV.all$names_collapse[candidate.ASV.all$Kingdom==taxa] # This propagates to the tip labels of the tree
alignment <- AlignSeqs(DNAStringSet(seqs), anchor=NA)
phang.align <- phyDat(as(alignment, "matrix"), type="DNA") #sequence alignments
dm <- dist.ml(phang.align) #build distance matrix
treeNJ <- NJ(dm) # Note, tip order != sequence order
#plot phylo based on distance matrix----
tip.color = c(1:80)
for(i in 1:length(tip.color))
{
#get some nice colors to show up.
if((candidate.ASV.all[i,4] == "Tomato") & (candidate.ASV.all[i,13] == "br")) tip.color[i] = "darkred"
if((candidate.ASV.all[i,4] == "Tomato") & (candidate.ASV.all[i,13] == "bs")) tip.color[i] = "darkorange2"
if((candidate.ASV.all[i,4] == "Pepper") & (candidate.ASV.all[i,13] == "br")) tip.color[i] = "cyan4"
if((candidate.ASV.all[i,4] == "Pepper") & (candidate.ASV.all[i,13] == "bs")) tip.color[i] = "darkblue"
if((candidate.ASV.all[i,4] == "Tomato") & (candidate.ASV.all[i,13] == "fr")) tip.color[i] = "darkred"
if((candidate.ASV.all[i,4] == "Tomato") & (candidate.ASV.all[i,13] == "fs")) tip.color[i] = "darkorange2"
if((candidate.ASV.all[i,4] == "Pepper") & (candidate.ASV.all[i,13] == "fr")) tip.color[i] = "cyan4"
if((candidate.ASV.all[i,4] == "Pepper") & (candidate.ASV.all[i,13] == "fs")) tip.color[i] = "darkblue"
}
#plot.phylo
dev.new()
plot.phylo(treeNJ,cex = 0.5,tip.color = tip.color[candidate.ASV.all$Kingdom==taxa],font = 2,main = taxa,xpd = T)
if(taxa == "Fungi") legend(0.02,40,legend =  c("Tomato - root","Tomato - soil","Pepper - root","Pepper - soil"), fill = c("darkred","darkorange2","cyan4","darkblue"),bg = "#FFFFFF99")
if(taxa == "Bacteria") legend(0.02,40,legend =  c("Tomato - root","Tomato - soil","Pepper - root","Pepper - soil"), fill = c("darkred","darkorange2","cyan4","darkblue"),bg = "#FFFFFF99")
dev.print(device=pdf, paste("figures/",tolower(taxa),"/Figure7_",tolower(taxa),"_tree.pdf",sep = ""), onefile=FALSE)
dev.off()
}
#Figure 7 - trees -----
figure7 = multi_panel_figure(width = 14,height = 7, unit = "inch",rows = 1,columns = 2)
figure7 %<>% fill_panel("figures/bacteria/Figure7_bacteria_tree.pdf",row = 1, column = 2)
figure7 %<>% fill_panel("figures/fungi/Figure7_fungi_tree.pdf",row = 1, column = 1)
figure7 %>% save_multi_panel_figure(filename = "figures/Figure7_candidateASVs.pdf")
