library(ggplot2)
library(ggforce)
####ggplot + geom_circle function
#geom_circle will draw the circles, with various options to make it prettier
#annotate will add text
venn = ggplot(circle.positions) +
geom_circle(aes(x0 = x, y0 = y, r = 1.5, fill = labels), alpha = .3, size = 1,colour="black") +
coord_fixed() +
theme_void() +
theme(legend.position = 'bottom') +
scale_fill_manual(values = c('cornflowerblue', 'firebrick',  'gold')) +
labs(fill = NULL) +
annotate("text", x = circle.data$x.position, y = circle.data$y.position+0.2, label = circle.data$counts, size = 5) +
annotate("text", x = circle.data$x.position[1:3], y = circle.data$y.position[1:3]-0.2, label = circle.data$counts_totals[1:3], size = 3)
#save graph as pdf on the desktop
dev.new(width=6, height=6,noRStudioGD = TRUE)
venn
dev.print(device=pdf,"~/Desktop/venn_figure.pdf", onefile=FALSE)
dev.off()
library(ggplot2)
library(ggforce)
#coordinates of the 3 circles
circle.positions <- data.frame(x = c(0, 0.866, -0.866),y = c(1, -0.5, -0.5),labels = c('HM', 'HF', 'MF'))
#data
circle.data = data.frame(x.position = c(0, 1.4, -1.4,0.8, -0.8, 0, 0),y.position = c(1.6, -0.6,-0.6, 0.5,0.5, -1, 0),
categories = c("hm","hf","mf","hmhf","hmmf","hfmf","hmhfmf"),counts=c(100,90,80,10,9,8,1),
counts_totals=c("120 (overexpressed: 30H / 90M)","109 (overexpressed: 29H / 80F)","98 (overexpressed: 9M / 90F)",0,0,0,0))
####ggplot + geom_circle function
#geom_circle will draw the circles, with various options to make it prettier
#annotate will add text
venn = ggplot(circle.positions) +
geom_circle(aes(x0 = x, y0 = y, r = 1.5, fill = labels), alpha = .3, size = 1,colour="black") +
coord_fixed() +
theme_void() +
theme(legend.position = 'bottom') +
scale_fill_manual(values = c('cornflowerblue', 'firebrick',  'gold')) +
labs(fill = NULL) +
annotate("text", x = circle.data$x.position, y = circle.data$y.position+0.2, label = circle.data$counts, size = 5) +
annotate("text", x = circle.data$x.position[1:3], y = circle.data$y.position[1:3]-0.2, label = circle.data$counts_totals[1:3], size = 3)
#save graph as pdf on the desktop
dev.new(width=6, height=6,noRStudioGD = TRUE)
venn
dev.print(device=pdf,"~/Desktop/venn_figure.pdf", onefile=FALSE)
dev.off()
2.5/250
3.5/4
18 * 0.05
18 * 0.03
18 * 0.02
0.9*0.01
0.9*0.005
0.9*0.15
0.36/0.135
0.9/0.009
0.54/0.0045
130*365
150*365
x = why oh why? This is painful, stupid and a waste of time
x = 'why oh why? This is painful, stupid and a waste of time'
x1 = 'why oh why didn't I do this before. This is so much easier, more elegant and efficient'
x1 = 'why oh why didnt I do this before. This is so much easier, more elegant and efficient'
x2='I guess'
plot(1,1)
plot(1,1,xlab = "Time")
plot(1,1,xlab = "Time",ylab = 'How anoyed I am')
plot(1,1,xlab = "Time",ylab = 'How anoyed I am',main = "bioinformatics: learning and mastering a new way to do X:")
plot(1,1,xlab = "Time",ylab = 'How anoyed I am',main = "bioinformatics: learning and mastering a new way to do X")
plot(0,type='n',axes=FALSE,ann=FALSE,xlab = "Time",ylab = 'How anoyed I am',main = "bioinformatics: learning and mastering a new way to do X")
plot(NULL,type='n',xlab = "Time",ylab = 'How anoyed I am',main = "bioinformatics: learning and mastering a new way to do X")
plot(0,xlim=c(0,1), ylim=c(0,1),xlab = "Time",ylab = 'How anoyed I am',main = "bioinformatics: learning and mastering a new way to do X")
plot(NULL,xlim=c(0,1), ylim=c(0,1),xlab = "Time",ylab = 'How anoyed I am',main = "bioinformatics: learning and mastering a new way to do X")
plot(0,type='n',axes=FALSE,xlab = "Time",ylab = 'How anoyed I am',main = "bioinformatics: learning and mastering a new way to do X")
plot(0,axes=FALSE,xlab = "Time",ylab = 'How anoyed I am',main = "bioinformatics: learning and mastering a new way to do X")
plot(0,type='n',ann = =FALSE,xlab = "Time",ylab = 'How anoyed I am',main = "bioinformatics: learning and mastering a new way to do X")
plot(0,type='n',ann =FALSE,xlab = "Time",ylab = 'How anoyed I am',main = "bioinformatics: learning and mastering a new way to do X")
plot(NULL,type='n',ann =FALSE,xlab = "Time",ylab = 'How anoyed I am',main = "bioinformatics: learning and mastering a new way to do X")
plot(0,type='n',ann =FALSE,xlab = "Time",ylab = 'How anoyed I am',main = "bioinformatics: learning and mastering a new way to do X")
plot(0,type='n',axes =FALSE,xlab = "Time",ylab = 'How anoyed I am',main = "bioinformatics: learning and mastering a new way to do X")
points(0,0)
points(0,0.2)
plot(0,axes =FALSE,xlab = "Time",ylab = 'How anoyed I am',main = "bioinformatics: learning and mastering a new way to do X")
plot(0,xlab = "Time",ylab = 'How anoyed I am',main = "bioinformatics: learning and mastering a new way to do X")
plot(0,type = 'N'mxlab = "Time",ylab = 'How anoyed I am',main = "bioinformatics: learning and mastering a new way to do X")
plot(0,type = 'N',xlab = "Time",ylab = 'How anoyed I am',main = "bioinformatics: learning and mastering a new way to do X")
plot(0,type = 'n',xlab = "Time",ylab = 'How anoyed I am',main = "bioinformatics: learning and mastering a new way to do X")
?plot
?par
plot(0,tck = 1,type = 'n',xlab = "Time",ylab = 'How anoyed I am',main = "bioinformatics: learning and mastering a new way to do X")
plot(0,tck = 0,type = 'n',xlab = "Time",ylab = 'How anoyed I am',main = "bioinformatics: learning and mastering a new way to do X")
plot(0,col.axis = 'white',type = 'n',xlab = "Time",ylab = 'How anoyed I am',main = "bioinformatics: learning and mastering a new way to do X")
?abline()
abline(-0.2,b=-1)
plot(0,col.axis = 'red',type = 'n',xlab = "Time",ylab = 'How anoyed I am',main = "bioinformatics: learning and mastering a new way to do X")
abline(1,b=-1)
plot(0,xlim = c(0,1),ylim = c(0,1),col.axis = 'red',type = 'n',xlab = "Time",ylab = 'How anoyed I am',main = "bioinformatics: learning and mastering a new way to do X")
abline(1,b=-1)
?line
library(rAltmetric)
install.packages("library(rAltmetric)")
install.packages("rAltmetric")
altmetrics(doi = "10.1093/biosci/biy038")
library(rAltmetric)
altmetrics(doi = "10.1093/biosci/biy038")
altmetrics(doi = "10.12688/f1000research.12037.3)")
altmetrics(doi = "10.12688/f1000research.12037.3")
altmetrics(doi = "10.12688/f1000research.12037")
altmetrics(doi = "10.12688/f1000research.12037.2")
altmetrics(doi = "10.12688/f1000research.12037.1")
altmetrics(doi = "10.1016/j.cub.2013.11.014")
altmetrics(doi = "10.1093/molbev/msv106")
altmetrics(doi = "10.1111/j.1365-294X.2012.05754.x")
altmetrics(doi = "10.1111/10.1096/fj.12-218164")
altmetrics(doi = "10.1096/fj.12-218164")
fasta = read.table("~/Desktop/Cyanotoxin_Database/New_Toxin_Database_OneLine_1.fna",stringsAsFactors = F)
annot = read.table("~/Desktop/Cyanotoxin_Database/New_Toxin_Database_OneLine_1.fxn",stringsAsFactors = F)
fasta = read.table("~/Desktop/Cyanotoxin_Database/New_Toxin_Database_OneLine_1.fna",stringsAsFactors = F)
annot = read.table("~/Desktop/Cyanotoxin_Database/New_Toxin_Database_OneLine_1.fxn",sep="\t",stringsAsFactors = F)
head(annot)
head(fasta)
fasta_names = fasta[seq(1,nrow(fasta)),by = 2,1]
fasta_names = fasta[seq(1,nrow(fasta),by = 2),1]
hea(fasta_names)
head(fasta_names)
ehad(annot)
head(annot)
head(annot[,3])
head(annot[,3],20)
(annot[,3])
(annot[,3])species = strsplit(annot[,3],split = "")
species = strsplit(annot[,3],split = "")
head(species)
species = strsplit(annot[,3],split = " ")
head(species)
species = strsplit(annot[1:5,3],split = " ")
species
lapply(species, `[[`, 1)
lapply(species, `[[`, 1:2)
lapply(species, `[[`, 1,2)
lapply(species, `[[`, c(1,2))
lapply(species, `[[`,1)
lapply(species, `[[`,2)
?lapply
lapply(species, `[[`,2)
lapply(species, `[[`,1)
lapply(species, `[[`,c(1:2)
)
lapply(species, `[[`,c(1,2))
lapply(species, `[[`,c(1,1))
lapply(species, `[[`,select = 1))
lapply(species, `[[`,select = 1)
lapply(species, `[[`,select = 2)
lapply(species, `[[`,select = c(1))
lapply(species, `[[`,select = c(1,2))
lapply(species, `[[`,select = c(1:2))
split = strsplit(annot[,3],split = " ")
genera=lapply(split, `[[`, 1)
species=lapply(split, `[[`, 2)
species
head(fasta_names)
head(annot)
genera=lapply(split, `[[`, -1)
genera=lapply(split, `[[`, 1)
i =1
temp = strsplit(annot[i,3],split = " ")
temp
temp = strsplit(annot[i,3],split = " ")[[1]]
temp
temp[c(1,2,length(temp))]
temp[-c(1,2,length(temp))]
temp = strsplit(annot[i,3],split = " ")[[1]]
functions[i] = paste(temp[-c(1,2,length(temp))],sep = " ")
functions = rep("n",nrow(annot))
temp = strsplit(annot[i,3],split = " ")[[1]]
functions[i] = paste(temp[-c(1,2,length(temp))],sep = " ")
paste(temp[-c(1,2,length(temp))],collapse = " ")
functions = rep("n",nrow(annot))
species  = rep("n",nrow(annot))
for(i in 1:nrow(annot))
{
temp = strsplit(annot[i,3],split = " ")[[1]]
functions[i] = paste(temp[-c(1,2,length(temp))],collapse = " ")
species[i] = paste(temp[c(1,2)],collapse = " ")
}
species
functions
fasta_names
functions = rep("n",nrow(annot))
species  = rep("n",nrow(annot))
for(i in 1:nrow(annot))
{
temp = strsplit(annot[i,3],split = " ")[[1]]
functions[i] = paste(temp[-c(1,2,length(temp))],collapse = " ")
species[i] = paste(temp[c(1,2)],collapse = " ")
fasta_names[i] = paste(fasta_names[i],functions[i],"[",species[i],"]",collapse = " ")
}
head(fasta_names)
functions = rep("n",nrow(annot))
species  = rep("n",nrow(annot))
for(i in 1:nrow(annot))
{
temp = strsplit(annot[i,3],split = " ")[[1]]
functions[i] = paste(temp[-c(1,2,length(temp))],collapse = " ")
species[i] = paste(temp[c(1,2)],collapse = " ")
fasta_names[i] = paste(fasta_names[i],functions[i],"[",species[i],"]",collapse = "")
}
head(fasta_names)
species[i]
paste(fasta_names[i],functions[i],"[",species[i],"]",collapse = "",sep = "")
fasta_names = fasta[seq(1,nrow(fasta),by = 2),1]
functions = rep("n",nrow(annot))
species  = rep("n",nrow(annot))
for(i in 1:nrow(annot))
{
temp = strsplit(annot[i,3],split = " ")[[1]]
functions[i] = paste(temp[-c(1,2,length(temp))],collapse = " ")
species[i] = paste(temp[c(1,2)],collapse = " ")
fasta_names[i] = paste(fasta_names[i],functions[i],"[",species[i],"]",collapse = "",sep = "")
}
head(fasta_names)
fasta_names = fasta[seq(1,nrow(fasta),by = 2),1]
functions = rep("n",nrow(annot))
species  = rep("n",nrow(annot))
for(i in 1:nrow(annot))
{
temp = strsplit(annot[i,3],split = " ")[[1]]
functions[i] = paste(temp[-c(1,2,length(temp))],collapse = " ")
species[i] = paste(temp[c(1,2)],collapse = " ")
fasta_names[i] = paste(fasta_names[i],functions[i],"[",species[i],"]",collapse = " ",sep = "")
}
head(fasta_names)
fasta_names = fasta[seq(1,nrow(fasta),by = 2),1]
functions = rep("n",nrow(annot))
species  = rep("n",nrow(annot))
for(i in 1:nrow(annot))
{
temp = strsplit(annot[i,3],split = " ")[[1]]
functions[i] = paste(temp[-c(1,2,length(temp))],collapse = " ")
species[i] = paste(temp[c(1,2)],collapse = " ")
fasta_names[i] = paste(fasta_names[i],functions[i],"[",species[i],"]",collapse = " ",sep = " ")
}
head(fasta_names)
fasta_names = fasta[seq(1,nrow(fasta),by = 2),1]
functions = rep("n",nrow(annot))
species  = rep("n",nrow(annot))
for(i in 1:nrow(annot))
{
temp = strsplit(annot[i,3],split = " ")[[1]]
functions[i] = paste(temp[-c(1,2,length(temp))],collapse = " ")
species[i] = paste(temp[c(1,2)],collapse = " ")
fasta_names[i] = paste(fasta_names[i]," ",functions[i]," [",species[i],"]",collapse = " ",sep = "")
}
head(fasta_names)
write.table("~/Desktop/Cyanotoxin_Database/New_Toxin_Database_OneLine_1.fna2",quote = F, row.names =F, col.names = F)
fasta[seq(1,nrow(fasta),by = 2),1] = fasta_names
write.table(fasta,"~/Desktop/Cyanotoxin_Database/New_Toxin_Database_OneLine_1.fna2",quote = F, row.names =F, col.names = F)
#get the names in proper format for SAMSA2 DIAMOND annotation
fasta = read.table("~/Desktop/Cyanotoxin_Database/New_Toxin_Database_OneLine_1.fna",stringsAsFactors = F)
annot = read.table("~/Desktop/Cyanotoxin_Database/New_Toxin_Database_OneLine_1.fxn",sep="\t",stringsAsFactors = F)
fasta_names = fasta[seq(1,nrow(fasta),by = 2),1]
functions = rep("n",nrow(annot))
species  = rep("n",nrow(annot))
for(i in 1:nrow(annot))
{
temp = strsplit(annot[i,3],split = " ")[[1]]
functions[i] = paste(temp[-c(1,2,length(temp))],collapse = " ")
species[i] = paste(temp[c(1,2)],collapse = " ")
fasta_names[i] = paste(fasta_names[i]," ",functions[i]," [",species[i],"]",collapse = " ",sep = "")
}
fasta[seq(1,nrow(fasta),by = 2),1] = fasta_names
write.table(fasta,"~/Desktop/Cyanotoxin_Database/New_Toxin_Database_OneLine_1.fna2",quote = F, row.names =F, col.names = F)
#get the names in proper format for SAMSA2 DIAMOND annotation
fasta = read.table("~/Desktop/Cyanotoxin_Database/New_Toxin_Database_OneLine_1.faa",stringsAsFactors = F)
annot = read.table("~/Desktop/Cyanotoxin_Database/New_Toxin_Database_OneLine_1.fxn",sep="\t",stringsAsFactors = F)
fasta_names = fasta[seq(1,nrow(fasta),by = 2),1]
functions = rep("n",nrow(annot))
species  = rep("n",nrow(annot))
for(i in 1:nrow(annot))
{
temp = strsplit(annot[i,3],split = " ")[[1]]
functions[i] = paste(temp[-c(1,2,length(temp))],collapse = " ")
species[i] = paste(temp[c(1,2)],collapse = " ")
fasta_names[i] = paste(fasta_names[i]," ",functions[i]," [",species[i],"]",collapse = " ",sep = "")
}
fasta[seq(1,nrow(fasta),by = 2),1] = fasta_names
write.table(fasta,"~/Desktop/Cyanotoxin_Database/New_Toxin_Database_OneLine_1.faa2",quote = F, row.names =F, col.names = F)
sequence = seq(1,48,by = 3)
sequence
sample(sequence)
x = sample(sequence)
x1 = x+1
x2=x1+1
data.frame(x,x1,x2)
t(data.frame(x,x1,x2))
library(tensorflow...)
library(tensorflow)
?tensorflow
library(vegan)
library(dplyr)
setwd("/Users/jerry/Documents/CSBQ/hijri/Acadian_seaplants")
#Figure5 - CCA fungi and Figure6 - CCA bacteria-----
####setting things up
productivity = read.table("results/plant_productivity_data.tsv", header = T, stringsAsFactors = F,sep = "\t")
productivity.norm = productivity
#we do a sqrt transformation on all variables to help in normalizing (it helps in all cases, but it's not perfect. Some residuals are still not normally distributed. But the effect is so strong that we don't care too much.)
productivity.norm$fruit.number = sqrt(productivity$fruit.number)
productivity.norm$fruits.weight = sqrt(productivity$fruits.weight)
productivity.norm$shoots.fresh.weight = sqrt(productivity$shoots.fresh.weight)
productivity.norm$shoots.dry.weight = sqrt(productivity$shoots.dry.weight)
productivity.norm$roots.fresh.weight = sqrt(productivity$roots.fresh.weight)
productivity.norm$roots.dry.weight = sqrt(productivity$roots.dry.weight)
#####de
spp= "f"
biotope = "soil"
if(biotope == "soil") asv.filt.abundants.norm = read.table(paste("results/asv.filt.abundants.norm_",spp,"s",sep=""))
if(biotope == "soil") taxo.abundants = read.table(paste("results/taxo.abundants_",spp,"s",sep=""))
if(biotope == "root") asv.filt.abundants.norm = read.table(paste("results/asv.filt.abundants.norm_",spp,"r",sep=""))
if(biotope == "root") taxo.abundants = read.table(paste("results/taxo.abundants_",spp,"r",sep=""))
#keep samples of interest in a new design.keep dataframe.
if(biotope == "soil")
{
productivity.norm.keep = productivity.norm[0,]
for(i in 1:nrow(asv.filt.abundants.norm))
{
temp = productivity.norm[productivity.norm[,16] == rownames(asv.filt.abundants.norm)[i],]
if(nrow(temp)==1) productivity.norm.keep[i,] = temp
if(nrow(temp)==0) productivity.norm.keep[i,] = rep(0,16)
}
}
if(biotope == "root")
{
#keep samples of interest in a new design.keep dataframe.
productivity.norm.keep = NULL
for(i in 1:nrow(asv.filt.abundants.norm))
{
productivity.norm.keep = rbind(productivity.norm.keep,productivity.norm[productivity.norm[,15] == rownames(asv.filt.abundants.norm)[i],])
}
}
candidate.ASV = NULL
#Do an RDA for TOMATOES or
species= "Tomato"
#keep only one species in the ASV matrix and the PRODUCTIVITY matrix
productivity.norm.keep.species = productivity.norm.keep[productivity.norm.keep[,1] == species,]
asv.filt.abundants.norm.species = asv.filt.abundants.norm[productivity.norm.keep[,1] == species,]
#hellinger transform
asv.filt.abundants.norm.species.hel = decostand(asv.filt.abundants.norm.species, "hel")
#RDA (Constrained Ordination)
rda = cca(asv.filt.abundants.norm.species.hel, productivity.norm.keep.species[,c(6,8,9,10)])
#verify model significance
print(anova.cca(rda))
plot(rda)
dev.new()
par(mfrow=c(2,1))
plot(rda)
#keep only one species in the ASV matrix and the PRODUCTIVITY matrix
productivity.norm.keep.species = productivity.norm.keep[productivity.norm.keep[,1] == species,]
asv.filt.abundants.norm.species = asv.filt.abundants.norm[productivity.norm.keep[,1] == species,]
#hellinger transform
asv.filt.abundants.norm.species.hel = decostand(asv.filt.abundants.norm.species, "hel")
#RDA (Constrained Ordination)
rda = rda(asv.filt.abundants.norm.species.hel, productivity.norm.keep.species[,c(6,8,9,10)])
#verify model significance
print(anova.cca(rda))
plot(rda)
dev.off()
dev.off()
dev.new()
par(mfrow=c(1,2))
dev.new()
par(mfrow=c(1,2))
#keep only one species in the ASV matrix and the PRODUCTIVITY matrix
productivity.norm.keep.species = productivity.norm.keep[productivity.norm.keep[,1] == species,]
asv.filt.abundants.norm.species = asv.filt.abundants.norm[productivity.norm.keep[,1] == species,]
#hellinger transform
asv.filt.abundants.norm.species.hel = decostand(asv.filt.abundants.norm.species, "hel")
#RDA (Constrained Ordination)
rda = cca(asv.filt.abundants.norm.species.hel, productivity.norm.keep.species[,c(6,8,9,10)])
#verify model significance
print(anova.cca(rda))
#plot
if(species == "Tomato" & biotope == "soil" & spp == "f") dev.new()
if(species == "Tomato" & biotope == "soil" & spp == "f") dev.new(width=28, height=14,units = "inch",noRStudioGD=T)
if(species == "Tomato" & biotope == "soil" & spp == "f") par(mar=c(5,5,2,1),xpd =T,mgp = c(3.5,2,1),mfrow=c(4,4))
rda.plot = plot(rda,scaling = "species",type = "n",font=2,cex.lab=1.2,font.lab=2,main = paste(species," (",biotope," - fungi)",sep = ""))
points(rda,scaling = "species",display = c("sp"),pch = 3,col = "red",cex = 0.6)
points(rda,scaling = "species",display = c("bp"),pch = 3,col = "blue")
text(rda,scaling = "species",display = c("bp"),col = "blue",cex = 0.8,font = 2)
col = ifelse(productivity.norm.keep.species[,2] == "F+","goldenrod4","darkgrey")
#add plot sites
text(rda.plot$sites,labels = rownames(rda.plot$sites),cex = 0.7, col = col,font = 2,adj = 0.8)
#Candidate ASVs (top10?) closest to arrowheads (excluding avg fruit weigth)
factors = c(1,3,4)     #remove avg. fruit weight. it is orthogonal to the other variables
arrow_x = mean(rda.plot$biplot[factors,1]*ordiArrowMul(rda,display = "bp"))
arrow_y = mean(rda.plot$biplot[factors,2]*ordiArrowMul(rda,display = "bp"))
dist_x = arrow_x - rda.plot$species[,1]
dist_y = arrow_y - rda.plot$species[,2]
dist = abs(dist_x)+abs(dist_y)
#candidate top10 and plot it.
candidate.top10 = rda.plot$species[order(dist),][1:10,]
points(candidate.top10,pch = 20, lwd =6,col = "red")
candidate.ASV = rbind(candidate.ASV,cbind(candidate.top10,species))
#keep only one species in the ASV matrix and the PRODUCTIVITY matrix
productivity.norm.keep.species = productivity.norm.keep[productivity.norm.keep[,1] == species,]
asv.filt.abundants.norm.species = asv.filt.abundants.norm[productivity.norm.keep[,1] == species,]
#hellinger transform
asv.filt.abundants.norm.species.hel = decostand(asv.filt.abundants.norm.species, "hel")
#RDA (Constrained Ordination)
rda = rda(asv.filt.abundants.norm.species.hel, productivity.norm.keep.species[,c(6,8,9,10)])
#verify model significance
print(anova.cca(rda))
#plot
if(species == "Tomato" & biotope == "soil" & spp == "f") dev.new()
if(species == "Tomato" & biotope == "soil" & spp == "f") dev.new(width=28, height=14,units = "inch",noRStudioGD=T)
if(species == "Tomato" & biotope == "soil" & spp == "f") par(mar=c(5,5,2,1),xpd =T,mgp = c(3.5,2,1),mfrow=c(4,4))
rda.plot = plot(rda,scaling = "species",type = "n",font=2,cex.lab=1.2,font.lab=2,main = paste(species," (",biotope," - fungi)",sep = ""))
points(rda,scaling = "species",display = c("sp"),pch = 3,col = "red",cex = 0.6)
points(rda,scaling = "species",display = c("bp"),pch = 3,col = "blue")
text(rda,scaling = "species",display = c("bp"),col = "blue",cex = 0.8,font = 2)
col = ifelse(productivity.norm.keep.species[,2] == "F+","goldenrod4","darkgrey")
#add plot sites
text(rda.plot$sites,labels = rownames(rda.plot$sites),cex = 0.7, col = col,font = 2,adj = 0.8)
#Candidate ASVs (top10?) closest to arrowheads (excluding avg fruit weigth)
factors = c(1,3,4)     #remove avg. fruit weight. it is orthogonal to the other variables
arrow_x = mean(rda.plot$biplot[factors,1]*ordiArrowMul(rda,display = "bp"))
arrow_y = mean(rda.plot$biplot[factors,2]*ordiArrowMul(rda,display = "bp"))
dist_x = arrow_x - rda.plot$species[,1]
dist_y = arrow_y - rda.plot$species[,2]
dist = abs(dist_x)+abs(dist_y)
#candidate top10 and plot it.
candidate.top10 = rda.plot$species[order(dist),][1:10,]
points(candidate.top10,pch = 20, lwd =6,col = "red")
candidate.ASV = rbind(candidate.ASV,cbind(candidate.top10,species))
#keep only one species in the ASV matrix and the PRODUCTIVITY matrix
productivity.norm.keep.species = productivity.norm.keep[productivity.norm.keep[,1] == species,]
asv.filt.abundants.norm.species = asv.filt.abundants.norm[productivity.norm.keep[,1] == species,]
#hellinger transform
asv.filt.abundants.norm.species.hel = decostand(asv.filt.abundants.norm.species, "hel")
#RDA (Constrained Ordination)
rda = cca(asv.filt.abundants.norm.species.hel, productivity.norm.keep.species[,c(6,8,9,10)])
#verify model significance
print(anova.cca(rda))
rda.plot = plot(rda,scaling = "species",type = "n",font=2,cex.lab=1.2,font.lab=2,main = paste(species," (",biotope," - fungi)",sep = ""))
points(rda,scaling = "species",display = c("sp"),pch = 3,col = "red",cex = 0.6)
points(rda,scaling = "species",display = c("bp"),pch = 3,col = "blue")
text(rda,scaling = "species",display = c("bp"),col = "blue",cex = 0.8,font = 2)
col = ifelse(productivity.norm.keep.species[,2] == "F+","goldenrod4","darkgrey")
#add plot sites
text(rda.plot$sites,labels = rownames(rda.plot$sites),cex = 0.7, col = col,font = 2,adj = 0.8)
#Candidate ASVs (top10?) closest to arrowheads (excluding avg fruit weigth)
factors = c(1,3,4)     #remove avg. fruit weight. it is orthogonal to the other variables
arrow_x = mean(rda.plot$biplot[factors,1]*ordiArrowMul(rda,display = "bp"))
arrow_y = mean(rda.plot$biplot[factors,2]*ordiArrowMul(rda,display = "bp"))
dist_x = arrow_x - rda.plot$species[,1]
dist_y = arrow_y - rda.plot$species[,2]
dist = abs(dist_x)+abs(dist_y)
#candidate top10 and plot it.
candidate.top10 = rda.plot$species[order(dist),][1:10,]
points(candidate.top10,pch = 20, lwd =6,col = "red")
candidate.ASV = rbind(candidate.ASV,cbind(candidate.top10,species))
rda.plot = plot(rda,scaling = "species",type = "n",font=2,cex.lab=1.2,font.lab=2,main = paste(species," (",biotope," - fungi)",sep = ""))
points(rda,scaling = "species",display = c("sp"),pch = 3,col = "red",cex = 0.6)
points(rda,scaling = "species",display = c("bp"),pch = 3,col = "blue")
text(rda,scaling = "species",display = c("bp"),col = "blue",cex = 0.8,font = 2)
col = ifelse(productivity.norm.keep.species[,2] == "F+","goldenrod4","darkgrey")
#add plot sites
text(rda.plot$sites,labels = rownames(rda.plot$sites),cex = 0.7, col = col,font = 2,adj = 0.8)
#Candidate ASVs (top10?) closest to arrowheads (excluding avg fruit weigth)
factors = c(1,3,4)     #remove avg. fruit weight. it is orthogonal to the other variables
arrow_x = mean(rda.plot$biplot[factors,1]*ordiArrowMul(rda,display = "bp"))
arrow_y = mean(rda.plot$biplot[factors,2]*ordiArrowMul(rda,display = "bp"))
dist_x = arrow_x - rda.plot$species[,1]
dist_y = arrow_y - rda.plot$species[,2]
dist = abs(dist_x)+abs(dist_y)
#candidate top10 and plot it.
candidate.top10 = rda.plot$species[order(dist),][1:10,]
points(candidate.top10,pch = 20, lwd =6,col = "red")
candidate.ASV = rbind(candidate.ASV,cbind(candidate.top10,species))
rda.plot = plot(rda,scaling = "species",type = "n",font=2,cex.lab=1.2,font.lab=2,main = paste(species," (",biotope," - fungi)",sep = ""))
points(rda,scaling = "species",display = c("sp"),pch = 3,col = "red",cex = 0.6)
points(rda,scaling = "species",display = c("bp"),pch = 3,col = "blue")
text(rda,scaling = "species",display = c("bp"),col = "blue",cex = 0.8,font = 2)
col = ifelse(productivity.norm.keep.species[,2] == "F+","goldenrod4","darkgrey")
#add plot sites
text(rda.plot$sites,labels = rownames(rda.plot$sites),cex = 0.7, col = col,font = 2,adj = 0.8)
#Candidate ASVs (top10?) closest to arrowheads (excluding avg fruit weigth)
factors = c(1,3,4)     #remove avg. fruit weight. it is orthogonal to the other variables
arrow_x = mean(rda.plot$biplot[factors,1]*ordiArrowMul(rda,display = "bp"))
arrow_y = mean(rda.plot$biplot[factors,2]*ordiArrowMul(rda,display = "bp"))
dist_x = arrow_x - rda.plot$species[,1]
dist_y = arrow_y - rda.plot$species[,2]
dist = abs(dist_x)+abs(dist_y)
#candidate top10 and plot it.
candidate.top10 = rda.plot$species[order(dist),][1:10,]
points(candidate.top10,pch = 20, lwd =6,col = "red")
candidate.ASV = rbind(candidate.ASV,cbind(candidate.top10,species))
rda.plot = plot(rda,scaling = "species",type = "n",font=2,cex.lab=1.2,font.lab=2,main = paste(species," (",biotope," - fungi)",sep = ""))
points(rda,scaling = "species",display = c("sp"),pch = 3,col = "red",cex = 0.6)
points(rda,scaling = "species",display = c("bp"),pch = 3,col = "blue")
text(rda,scaling = "species",display = c("bp"),col = "blue",cex = 0.8,font = 2)
col = ifelse(productivity.norm.keep.species[,2] == "F+","goldenrod4","darkgrey")
#add plot sites
text(rda.plot$sites,labels = rownames(rda.plot$sites),cex = 0.7, col = col,font = 2,adj = 0.8)
#Candidate ASVs (top10?) closest to arrowheads (excluding avg fruit weigth)
factors = c(1,3,4)     #remove avg. fruit weight. it is orthogonal to the other variables
arrow_x = mean(rda.plot$biplot[factors,1]*ordiArrowMul(rda,display = "bp"))
arrow_y = mean(rda.plot$biplot[factors,2]*ordiArrowMul(rda,display = "bp"))
dist_x = arrow_x - rda.plot$species[,1]
dist_y = arrow_y - rda.plot$species[,2]
dist = abs(dist_x)+abs(dist_y)
#candidate top10 and plot it.
candidate.top10 = rda.plot$species[order(dist),][1:10,]
points(candidate.top10,pch = 20, lwd =6,col = "red")
candidate.ASV = rbind(candidate.ASV,cbind(candidate.top10,species))
