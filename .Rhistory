setwd("/Users/jerry/Documents/CSBQ/hijri/Acadian_seaplants")
#combining figures
library(multipanelfigure)
library(magrittr)
library(dplyr)
library(DECIPHER)
library(phangorn)
library(phyloseq)
#Figure 4 - barplots -----
figure4 = multi_panel_figure(width = 28,height = 8, unit = "inch",rows = 1,columns = 4)
figure4 %<>% fill_panel("figures/bacteria/Figure4br_FAMILY_ASVabundance.pdf",row = 1, column = 1)
figure4 %<>% fill_panel("figures/bacteria/Figure4bs_FAMILY_ASVabundance.pdf",row = 1, column = 2)
figure4 %<>% fill_panel("figures/fungi/Figure4fr_FAMILY_ASVabundance.pdf",row = 1, column = 3)
figure4 %<>% fill_panel("figures/fungi/Figure4fs_FAMILY_ASVabundance.pdf",row = 1, column = 4)
figure4 %>% save_multi_panel_figure(filename = "figures/Figure4_barplots.pdf")
#Figure 6 - RDA -----
figure6 = multi_panel_figure(width = 28,height = 14, unit = "inch",rows = 2,columns = 4)
figure6 %<>% fill_panel("figures/bacteria/Figure6bs_RDA_Tomato.pdf",row = 1, column = 1)
figure6 %<>% fill_panel("figures/bacteria/Figure6bs_RDA_Pepper.pdf",row = 2, column = 1)
figure6 %<>% fill_panel("figures/bacteria/Figure6br_RDA_Tomato.pdf",row = 1, column = 2)
figure6 %<>% fill_panel("figures/bacteria/Figure6br_RDA_Pepper.pdf",row = 2, column = 2)
figure6 %<>% fill_panel("figures/fungi/Figure6fs_RDA_Tomato.pdf",row = 1, column = 3)
figure6 %<>% fill_panel("figures/fungi/Figure6fs_RDA_Pepper.pdf",row = 2, column = 3)
figure6 %<>% fill_panel("figures/fungi/Figure6fr_RDA_Tomato.pdf",row = 1, column = 4)
figure6 %<>% fill_panel("figures/fungi/Figure6fr_RDA_Pepper.pdf",row = 2, column = 4)
figure6 %>% save_multi_panel_figure(filename = "figures/Figure6_rda.pdf")
#Figure5 - alpha -----
figure5 = multi_panel_figure(width = 18,height = 14, unit = "inch",rows = 2,columns = 2)
figure5 %<>% fill_panel("figures/bacteria/Figure4bs_alpha.pdf",row = 1, column = 1)
figure5 %<>% fill_panel("figures/bacteria/Figure4br_alpha.pdf",row = 1, column = 2)
figure5 %<>% fill_panel("figures/fungi/Figure4fs_alpha.pdf",row = 2, column = 1)
figure5 %<>% fill_panel("figures/fungi/Figure4fr_alpha.pdf",row = 2, column = 2)
figure5 %>% save_multi_panel_figure(filename = "figures/Figure5_alpha.pdf")
#Tree of candidate ASVs with taxonomy infos---
conditions = c("br","bs","fr","fs")
candidate.ASV.all = NULL
for(i in 1:4)
{
candidate.ASV = read.table(paste("results/candidate.ASV.",conditions[i],".txt",sep = ""),stringsAsFactors = F)
if(ncol(candidate.ASV) == 11) {candidate.ASV = candidate.ASV[,c(1:11,11)];candidate.ASV[,11] = "na";colnames(candidate.ASV)[11:12]  = c("Species","X")}
candidate.ASV$condition = conditions[i]
print(dim(candidate.ASV))
candidate.ASV.all = rbind(candidate.ASV.all,candidate.ASV)
}
#collapse taxo info.
candidate.ASV.all$names_collapse = NULL
for(i in 1:80)
{
candidate.ASV.all$names_collapse[i]=paste(candidate.ASV.all[i,c(1,6:11)],collapse = ";")
candidate.ASV.all$names_collapse[i]=gsub(";NA","",candidate.ASV.all$names_collapse[i],ignore.case=T)
}
#plot trees
for(taxa in c("Bacteria","Fungi"))
{
###get phylo ----
seqs <- candidate.ASV.all[candidate.ASV.all$Kingdom==taxa,12]
names(seqs) <- candidate.ASV.all$names_collapse[candidate.ASV.all$Kingdom==taxa] # This propagates to the tip labels of the tree
alignment <- AlignSeqs(DNAStringSet(seqs), anchor=NA)
phang.align <- ?phyDat
(as(alignment, "matrix"), type="DNA") #sequence alignments
dm <- dist.ml(phang.align) #build distance matrix
treeNJ <- NJ(dm) # Note, tip order != sequence order
#plot phylo based on distance matrix----
tip.color = c(1:80)
for(i in 1:length(tip.color))
{
#get some nice colors to show up.
if((candidate.ASV.all[i,4] == "Tomato") & (candidate.ASV.all[i,13] == "br")) tip.color[i] = "darkred"
if((candidate.ASV.all[i,4] == "Tomato") & (candidate.ASV.all[i,13] == "bs")) tip.color[i] = "darkorange2"
if((candidate.ASV.all[i,4] == "Pepper") & (candidate.ASV.all[i,13] == "br")) tip.color[i] = "cyan4"
if((candidate.ASV.all[i,4] == "Pepper") & (candidate.ASV.all[i,13] == "bs")) tip.color[i] = "darkblue"
if((candidate.ASV.all[i,4] == "Tomato") & (candidate.ASV.all[i,13] == "fr")) tip.color[i] = "darkred"
if((candidate.ASV.all[i,4] == "Tomato") & (candidate.ASV.all[i,13] == "fs")) tip.color[i] = "darkorange2"
if((candidate.ASV.all[i,4] == "Pepper") & (candidate.ASV.all[i,13] == "fr")) tip.color[i] = "cyan4"
if((candidate.ASV.all[i,4] == "Pepper") & (candidate.ASV.all[i,13] == "fs")) tip.color[i] = "darkblue"
}
#plot.phylo
dev.new()
plot.phylo(treeNJ,cex = 0.5,tip.color = tip.color[candidate.ASV.all$Kingdom==taxa],font = 2,main = taxa,xpd = T)
legend(max(treeNJ$edge.length),40,legend =  c("Tomato - root","Tomato - soil","Pepper - root","Pepper - soil"), fill = c("darkred","darkorange2","cyan4","darkblue"))
dev.print(device=pdf, paste("figures/",tolower(taxa),"/Figure7_",tolower(taxa),"_tree.pdf",sep = ""), onefile=FALSE)
dev.off()
}
?phyDat
phang.align <- phyDat(alignment)
alignment <- AlignSeqs(DNAStringSet(seqs), anchor=NA)
#collapse taxo info.
candidate.ASV.all$names_collapse = NULL
for(i in 1:80)
{
candidate.ASV.all$names_collapse[i]=paste(candidate.ASV.all[i,c(1,6:11)],collapse = ";")
candidate.ASV.all$names_collapse[i]=gsub(";NA","",candidate.ASV.all$names_collapse[i],ignore.case=T)
}
#plot trees
for(taxa in c("Bacteria","Fungi"))
{
###get phylo ----
seqs <- candidate.ASV.all[candidate.ASV.all$Kingdom==taxa,12]
names(seqs) <- candidate.ASV.all$names_collapse[candidate.ASV.all$Kingdom==taxa] # This propagates to the tip labels of the tree
alignment <- AlignSeqs(DNAStringSet(seqs), anchor=NA)
phang.align <- phyDat(alignment)
(as(alignment, "matrix"), type="DNA") #sequence alignments
dm <- dist.ml(phang.align) #build distance matrix
treeNJ <- NJ(dm) # Note, tip order != sequence order
#plot phylo based on distance matrix----
tip.color = c(1:80)
for(i in 1:length(tip.color))
{
#get some nice colors to show up.
if((candidate.ASV.all[i,4] == "Tomato") & (candidate.ASV.all[i,13] == "br")) tip.color[i] = "darkred"
if((candidate.ASV.all[i,4] == "Tomato") & (candidate.ASV.all[i,13] == "bs")) tip.color[i] = "darkorange2"
if((candidate.ASV.all[i,4] == "Pepper") & (candidate.ASV.all[i,13] == "br")) tip.color[i] = "cyan4"
if((candidate.ASV.all[i,4] == "Pepper") & (candidate.ASV.all[i,13] == "bs")) tip.color[i] = "darkblue"
if((candidate.ASV.all[i,4] == "Tomato") & (candidate.ASV.all[i,13] == "fr")) tip.color[i] = "darkred"
if((candidate.ASV.all[i,4] == "Tomato") & (candidate.ASV.all[i,13] == "fs")) tip.color[i] = "darkorange2"
if((candidate.ASV.all[i,4] == "Pepper") & (candidate.ASV.all[i,13] == "fr")) tip.color[i] = "cyan4"
if((candidate.ASV.all[i,4] == "Pepper") & (candidate.ASV.all[i,13] == "fs")) tip.color[i] = "darkblue"
}
#plot.phylo
dev.new()
plot.phylo(treeNJ,cex = 0.5,tip.color = tip.color[candidate.ASV.all$Kingdom==taxa],font = 2,main = taxa,xpd = T)
legend(max(treeNJ$edge.length),40,legend =  c("Tomato - root","Tomato - soil","Pepper - root","Pepper - soil"), fill = c("darkred","darkorange2","cyan4","darkblue"))
dev.print(device=pdf, paste("figures/",tolower(taxa),"/Figure7_",tolower(taxa),"_tree.pdf",sep = ""), onefile=FALSE)
dev.off()
}
#plot trees
for(taxa in c("Bacteria","Fungi"))
{
###get phylo ----
seqs <- candidate.ASV.all[candidate.ASV.all$Kingdom==taxa,12]
names(seqs) <- candidate.ASV.all$names_collapse[candidate.ASV.all$Kingdom==taxa] # This propagates to the tip labels of the tree
alignment <- AlignSeqs(DNAStringSet(seqs), anchor=NA)
phang.align <- phyDat(as(alignment, "matrix"), type="DNA") #sequence alignments
dm <- dist.ml(phang.align) #build distance matrix
treeNJ <- NJ(dm) # Note, tip order != sequence order
#plot phylo based on distance matrix----
tip.color = c(1:80)
for(i in 1:length(tip.color))
{
#get some nice colors to show up.
if((candidate.ASV.all[i,4] == "Tomato") & (candidate.ASV.all[i,13] == "br")) tip.color[i] = "darkred"
if((candidate.ASV.all[i,4] == "Tomato") & (candidate.ASV.all[i,13] == "bs")) tip.color[i] = "darkorange2"
if((candidate.ASV.all[i,4] == "Pepper") & (candidate.ASV.all[i,13] == "br")) tip.color[i] = "cyan4"
if((candidate.ASV.all[i,4] == "Pepper") & (candidate.ASV.all[i,13] == "bs")) tip.color[i] = "darkblue"
if((candidate.ASV.all[i,4] == "Tomato") & (candidate.ASV.all[i,13] == "fr")) tip.color[i] = "darkred"
if((candidate.ASV.all[i,4] == "Tomato") & (candidate.ASV.all[i,13] == "fs")) tip.color[i] = "darkorange2"
if((candidate.ASV.all[i,4] == "Pepper") & (candidate.ASV.all[i,13] == "fr")) tip.color[i] = "cyan4"
if((candidate.ASV.all[i,4] == "Pepper") & (candidate.ASV.all[i,13] == "fs")) tip.color[i] = "darkblue"
}
#plot.phylo
dev.new()
plot.phylo(treeNJ,cex = 0.5,tip.color = tip.color[candidate.ASV.all$Kingdom==taxa],font = 2,main = taxa,xpd = T)
legend(max(treeNJ$edge.length),40,legend =  c("Tomato - root","Tomato - soil","Pepper - root","Pepper - soil"), fill = c("darkred","darkorange2","cyan4","darkblue"))
dev.print(device=pdf, paste("figures/",tolower(taxa),"/Figure7_",tolower(taxa),"_tree.pdf",sep = ""), onefile=FALSE)
dev.off()
}
setwd("/Users/jerry/Documents/CSBQ/hijri/Acadian_seaplants")
###setting things up ----
library(nlme)
library(vegan)
library(pals)
library(ape)
library(dplyr)
#load ASVS and taxonomy information ----
dev.new()
asv = read.table("results/asv/asv.bacteria_soil",row.names = 1, sep = " ",header =TRUE,stringsAsFactors = F)
taxo = read.table("results/asv/asv.taxo.bacteria_soil",row.names = 1, sep = " ",header =TRUE,stringsAsFactors = F)
#tidy up ----
#remove the bad samples (below 4 standard deviations...).
asv.sum = rowSums(asv)
min(asv.sum);max(asv.sum)
asv.sum.mean = mean(asv.sum)
asv.sum.sd = sd(asv.sum)
asv.filt = asv[asv.sum > (asv.sum.mean - 4*asv.sum.sd),]
asv.filt = asv[asv.sum > 1000,]
#98% of ASVs are present in less than 10 individuals (5% of samples): this is huge. and justifies the clustering I think for soil bacteria....
asv.singletons = rep(0,ncol(asv.filt))
for(i in 1:ncol(asv.filt))
{
asv.singletons[i] = length(asv.filt[asv.filt[,i]!=0,i])
}
asv.filt.abundants = asv.filt[,asv.singletons>10]
taxo.abundants = taxo[asv.singletons>10,]
#what fraction of ASV do you got rid off
print(length(asv.singletons[asv.singletons<10])/length(asv.singletons))
#what percentage of reads did you keep
sum(asv.filt.abundants)/sum(asv.filt)
#relative abundance
asv.filt.abundants.norm = asv.filt.abundants/rowSums(asv.filt.abundants)
###statistal analyses on ASVs----
design = read.table("reference_material/experimental_design.txt", header = TRUE, stringsAsFactors = FALSE)
#keep samples of interest in a new design.keep dataframe.
design.keep = NULL
for(i in 1:nrow(asv.filt.abundants.norm))
{
design.keep = rbind(design.keep,design[design[,2] == rownames(asv.filt.abundants.norm)[i],])
}
asv.filt.abundants.norm.design = cbind(asv.filt.abundants.norm, design.keep)
#select and ASV (here ASV1)
ASV1 = asv.filt.abundants.norm.design[,c(1,(ncol(asv.filt.abundants.norm.design)-9):ncol(asv.filt.abundants.norm.design))]
#linear mixed effect model (block is random) for ASV1 ----
lmm1 <- lme(ASV1~fertilization+species+planted,data = ASV1,random = ~1|bloc/replicate, method = "REML")
anova(lmm1)
#             numDF denDF   F-value p-value
#(Intercept)       1   165 203.32592  <.0001
#fertilization     1   165   2.87183  0.0920
#species           1   165   2.93756  0.0884
#planted           1   165   1.85800  0.1747
###barplots of all ASVs ----
###to look at diversity among fertilization, soil/roots, planted, species----
#first group things according to treatment and species.
asv.filt.abundants.norm.barplot = cbind(colMeans(asv.filt.abundants.norm[design.keep$fertilization == 0, ]),
colMeans(asv.filt.abundants.norm[design.keep$fertilization == 1, ]),
colMeans(asv.filt.abundants.norm[design.keep$species == "tomato", ]),
colMeans(asv.filt.abundants.norm[design.keep$species == "pepper", ]),
colMeans(asv.filt.abundants.norm[design.keep$planted == 0, ]),
colMeans(asv.filt.abundants.norm[design.keep$planted == 1, ]))
colnames(asv.filt.abundants.norm.barplot) = c("control", "fertilization","tomato","pepper","non-planted","planted")
#barplot
barplot.taxo = c(1:nrow(taxo.abundants))
for(i in 1:length(barplot.taxo))
{
barplot.taxo[i]=paste(taxo.abundants[i,2:6],collapse = ";")
}
dev.new()
par(mar=c(16,4,4,2))
barplot(asv.filt.abundants.norm.barplot,beside = F,font = 3, axisnames = TRUE,cex.names = 0.6, cex.lab = 0.6,ylab = "Relative ASV abundance",col = c(cols25(),rep("grey",11000)), las = 3, xpd = TRUE)
legend(0.1,-0.12,fill = cols25()[1:20],legend =  barplot.taxo[1:20],cex = 0.75,xpd =TRUE)
dev.print(device=pdf, "figures/bacteria/Figure4bs_ASVabundance.pdf", onefile=FALSE)
dev.off()
#summarize with dplyr.
#summarize with dplyr by FAMILY
asv.filt.abundants.norm.FAMILY = as.data.frame(asv.filt.abundants.norm.barplot) %>% group_by(taxo.abundants$Family) %>% summarise_all(sum)
#top10
temp = asv.filt.abundants.norm.FAMILY[order(rowSums(asv.filt.abundants.norm.FAMILY[,2:7]),decreasing = T),]
temp[is.na(temp),1] = "unknown"
asv.filt.abundants.norm.FAMILY.top10 = temp[1:10,]
barplot.data = as.data.frame(unlist(asv.filt.abundants.norm.FAMILY.top10[,2:7]))
colnames(barplot.data)[1] = "fraction"
n = nrow(asv.filt.abundants.norm.FAMILY.top10)
barplot.data$treatment =c(rep("control",n),rep("fertilization",n),rep("tomato",n),rep("pepper",n),rep("non-planted",n),rep("planted",n))
barplot.data$taxonomy = unlist(rep(asv.filt.abundants.norm.FAMILY.top10[,1],ncol(asv.filt.abundants.norm.FAMILY.top10)-1))
###ggplot ----
dev.new()
p = ggplot() + labs(title = "Soil - bacteria",fill = "Taxonomy (family)") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size=14, face="bold")) +
geom_bar(aes(y = fraction, x = treatment, fill = taxonomy),
data = barplot.data,stat="identity")
dev.new()
setwd("/Users/jerry/Documents/CSBQ/hijri/Acadian_seaplants")
###setting things up ----
library(nlme)
library(vegan)
library(pals)
library(ape)
library(ggplot2)
library(dplyr)
#load ASVS and taxonomy information ----
dev.new()
asv = read.table("results/asv/asv.bacteria_soil",row.names = 1, sep = " ",header =TRUE,stringsAsFactors = F)
taxo = read.table("results/asv/asv.taxo.bacteria_soil",row.names = 1, sep = " ",header =TRUE,stringsAsFactors = F)
#tidy up ----
#remove the bad samples (below 4 standard deviations...).
asv.sum = rowSums(asv)
min(asv.sum);max(asv.sum)
asv.sum.mean = mean(asv.sum)
asv.sum.sd = sd(asv.sum)
asv.filt = asv[asv.sum > (asv.sum.mean - 4*asv.sum.sd),]
asv.filt = asv[asv.sum > 1000,]
#98% of ASVs are present in less than 10 individuals (5% of samples): this is huge. and justifies the clustering I think for soil bacteria....
asv.singletons = rep(0,ncol(asv.filt))
for(i in 1:ncol(asv.filt))
{
asv.singletons[i] = length(asv.filt[asv.filt[,i]!=0,i])
}
asv.filt.abundants = asv.filt[,asv.singletons>10]
taxo.abundants = taxo[asv.singletons>10,]
#what fraction of ASV do you got rid off
print(length(asv.singletons[asv.singletons<10])/length(asv.singletons))
#what percentage of reads did you keep
sum(asv.filt.abundants)/sum(asv.filt)
#relative abundance
asv.filt.abundants.norm = asv.filt.abundants/rowSums(asv.filt.abundants)
###statistal analyses on ASVs----
design = read.table("reference_material/experimental_design.txt", header = TRUE, stringsAsFactors = FALSE)
#keep samples of interest in a new design.keep dataframe.
design.keep = NULL
for(i in 1:nrow(asv.filt.abundants.norm))
{
design.keep = rbind(design.keep,design[design[,2] == rownames(asv.filt.abundants.norm)[i],])
}
asv.filt.abundants.norm.design = cbind(asv.filt.abundants.norm, design.keep)
#select and ASV (here ASV1)
ASV1 = asv.filt.abundants.norm.design[,c(1,(ncol(asv.filt.abundants.norm.design)-9):ncol(asv.filt.abundants.norm.design))]
#linear mixed effect model (block is random) for ASV1 ----
lmm1 <- lme(ASV1~fertilization+species+planted,data = ASV1,random = ~1|bloc/replicate, method = "REML")
anova(lmm1)
#             numDF denDF   F-value p-value
#(Intercept)       1   165 203.32592  <.0001
#fertilization     1   165   2.87183  0.0920
#species           1   165   2.93756  0.0884
#planted           1   165   1.85800  0.1747
###barplots of all ASVs ----
###to look at diversity among fertilization, soil/roots, planted, species----
#first group things according to treatment and species.
asv.filt.abundants.norm.barplot = cbind(colMeans(asv.filt.abundants.norm[design.keep$fertilization == 0, ]),
colMeans(asv.filt.abundants.norm[design.keep$fertilization == 1, ]),
colMeans(asv.filt.abundants.norm[design.keep$species == "tomato", ]),
colMeans(asv.filt.abundants.norm[design.keep$species == "pepper", ]),
colMeans(asv.filt.abundants.norm[design.keep$planted == 0, ]),
colMeans(asv.filt.abundants.norm[design.keep$planted == 1, ]))
colnames(asv.filt.abundants.norm.barplot) = c("control", "fertilization","tomato","pepper","non-planted","planted")
#barplot
barplot.taxo = c(1:nrow(taxo.abundants))
for(i in 1:length(barplot.taxo))
{
barplot.taxo[i]=paste(taxo.abundants[i,2:6],collapse = ";")
}
dev.new()
par(mar=c(16,4,4,2))
barplot(asv.filt.abundants.norm.barplot,beside = F,font = 3, axisnames = TRUE,cex.names = 0.6, cex.lab = 0.6,ylab = "Relative ASV abundance",col = c(cols25(),rep("grey",11000)), las = 3, xpd = TRUE)
legend(0.1,-0.12,fill = cols25()[1:20],legend =  barplot.taxo[1:20],cex = 0.75,xpd =TRUE)
dev.print(device=pdf, "figures/bacteria/Figure4bs_ASVabundance.pdf", onefile=FALSE)
dev.off()
#summarize with dplyr.
#summarize with dplyr by FAMILY
asv.filt.abundants.norm.FAMILY = as.data.frame(asv.filt.abundants.norm.barplot) %>% group_by(taxo.abundants$Family) %>% summarise_all(sum)
#top10
temp = asv.filt.abundants.norm.FAMILY[order(rowSums(asv.filt.abundants.norm.FAMILY[,2:7]),decreasing = T),]
temp[is.na(temp),1] = "unknown"
asv.filt.abundants.norm.FAMILY.top10 = temp[1:10,]
barplot.data = as.data.frame(unlist(asv.filt.abundants.norm.FAMILY.top10[,2:7]))
colnames(barplot.data)[1] = "fraction"
n = nrow(asv.filt.abundants.norm.FAMILY.top10)
barplot.data$treatment =c(rep("control",n),rep("fertilization",n),rep("tomato",n),rep("pepper",n),rep("non-planted",n),rep("planted",n))
barplot.data$taxonomy = unlist(rep(asv.filt.abundants.norm.FAMILY.top10[,1],ncol(asv.filt.abundants.norm.FAMILY.top10)-1))
###ggplot ----
dev.new()
p = ggplot() + labs(title = "Soil - bacteria",fill = "Taxonomy (family)") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size=14, face="bold")) +
geom_bar(aes(y = fraction, x = treatment, fill = taxonomy),
data = barplot.data,stat="identity")
p + scale_fill_brewer(palette = "Set3")
dev.print(device=pdf, "figures/bacteria/Figure4bs_FAMILY_ASVabundance.pdf", onefile=FALSE)
dev.off()
#Figure 4 - barplots -----
figure4 = multi_panel_figure(width = 28,height = 8, unit = "inch",rows = 1,columns = 4)
figure4 %<>% fill_panel("figures/bacteria/Figure4br_FAMILY_ASVabundance.pdf",row = 1, column = 1)
figure4 %<>% fill_panel("figures/bacteria/Figure4bs_FAMILY_ASVabundance.pdf",row = 1, column = 2)
figure4 %<>% fill_panel("figures/fungi/Figure4fr_FAMILY_ASVabundance.pdf",row = 1, column = 3)
figure4 %<>% fill_panel("figures/fungi/Figure4fs_FAMILY_ASVabundance.pdf",row = 1, column = 4)
figure4 %>% save_multi_panel_figure(filename = "figures/Figure4_barplots.pdf")
